define HELP_TEXT_POLYBENCH
echo ""
echo "Polybench Make Targets"
echo "--------------------------------------------------------------------------------"
echo "polybench              Compiles all targets for all benchmarks"
echo "polybench-clean        Runs clean for each benchmark"
echo "polybench-purge        Like polybench-clean but also deletes results directory"
echo "polybench-compare      Runs two compiled versions and compares their outputs"
echo "                       The versions to compare is defined by COMP1 and COMP2"
echo "polybench-check        Runs jlc compiled versions and checks md5 output"
echo "polybench-time         Collects the execution time of specified target."
echo "                       Default target is COMP1 but can also be set by TARGET"
echo "                       Collected results are stored in $(POLYBENCH_RESULTS)"
echo "polybench-timetable    Collects the excution time for all benchmarks and targets"
echo "polybench-size         Collects the text size of sepcified target."
echo "                       Default target is COMP1 but can also be set by TARGET"
echo "                       Collected results are stored in $(POLYBENCH_RESULTS)"
echo "polybench-sizetable    Collects the text size for all benchmarks and targets"
#echo "polybench-jlmstats     Collects JLM compilation metrics for all benchmarks."
echo "polybench-help         Prints possible options for COMP1, COMP2, and TARGET"
endef

.PHONY: polybench-help
polybench-help:
	@$(HELP_TEXT_POLYBENCH_TARGETS)

CC=clang

POLYBENCH_BUILD = $(POLYBENCH_ROOT)/build

POLYBENCH_RESULTS = $(POLYBENCH_ROOT)/results
POLYBENCH_JLMSTATS = $(POLYBENCH_RESULTS)/jlmstats.log

CORRELATION_ROOT = datamining/correlation
include $(POLYBENCH_ROOT)/$(CORRELATION_ROOT)/Makefile.sub
COVARIANCE_ROOT = datamining/covariance
include $(POLYBENCH_ROOT)/$(COVARIANCE_ROOT)/Makefile.sub

GEMM_ROOT = linear-algebra/blas/gemm
include $(POLYBENCH_ROOT)/$(GEMM_ROOT)/Makefile.sub
GEMVER_ROOT = linear-algebra/blas/gemver
include $(POLYBENCH_ROOT)/$(GEMVER_ROOT)/Makefile.sub
GESUMMV_ROOT = linear-algebra/blas/gesummv
include $(POLYBENCH_ROOT)/$(GESUMMV_ROOT)/Makefile.sub
SYMM_ROOT = linear-algebra/blas/symm
include $(POLYBENCH_ROOT)/$(SYMM_ROOT)/Makefile.sub
SYR2K_ROOT = linear-algebra/blas/syr2k
include $(POLYBENCH_ROOT)/$(SYR2K_ROOT)/Makefile.sub
SYRK_ROOT = linear-algebra/blas/syrk
include $(POLYBENCH_ROOT)/$(SYRK_ROOT)/Makefile.sub
TRMM_ROOT = linear-algebra/blas/trmm
include $(POLYBENCH_ROOT)/$(TRMM_ROOT)/Makefile.sub

2MM_ROOT = linear-algebra/kernels/2mm
include $(POLYBENCH_ROOT)/$(2MM_ROOT)/Makefile.sub
3MM_ROOT = linear-algebra/kernels/3mm
include $(POLYBENCH_ROOT)/$(3MM_ROOT)/Makefile.sub
ATAX_ROOT = linear-algebra/kernels/atax
include $(POLYBENCH_ROOT)/$(ATAX_ROOT)/Makefile.sub
BICG_ROOT = linear-algebra/kernels/bicg
include $(POLYBENCH_ROOT)/$(BICG_ROOT)/Makefile.sub
DOITGEN_ROOT = linear-algebra/kernels/doitgen
include $(POLYBENCH_ROOT)/$(DOITGEN_ROOT)/Makefile.sub
MVT_ROOT = linear-algebra/kernels/mvt
include $(POLYBENCH_ROOT)/$(MVT_ROOT)/Makefile.sub

CHOLESKY_ROOT = linear-algebra/solvers/cholesky
include $(POLYBENCH_ROOT)/$(CHOLESKY_ROOT)/Makefile.sub
DURBIN_ROOT = linear-algebra/solvers/durbin
include $(POLYBENCH_ROOT)/$(DURBIN_ROOT)/Makefile.sub
GRAMSCHMIDT_ROOT = linear-algebra/solvers/gramschmidt
include $(POLYBENCH_ROOT)/$(GRAMSCHMIDT_ROOT)/Makefile.sub
LU_ROOT = linear-algebra/solvers/lu
include $(POLYBENCH_ROOT)/$(LU_ROOT)/Makefile.sub
LUDCMP_ROOT = linear-algebra/solvers/ludcmp
include $(POLYBENCH_ROOT)/$(LUDCMP_ROOT)/Makefile.sub
TRISOLV_ROOT = linear-algebra/solvers/trisolv
include $(POLYBENCH_ROOT)/$(TRISOLV_ROOT)/Makefile.sub

DERICHE_ROOT = medley/deriche
include $(POLYBENCH_ROOT)/$(DERICHE_ROOT)/Makefile.sub
FLOYD_WARSHALL_ROOT = medley/floyd-warshall
include $(POLYBENCH_ROOT)/$(FLOYD_WARSHALL_ROOT)/Makefile.sub
NUSSINOV_ROOT = medley/nussinov
include $(POLYBENCH_ROOT)/$(NUSSINOV_ROOT)/Makefile.sub

ADI_ROOT = stencils/adi
include $(POLYBENCH_ROOT)/$(ADI_ROOT)/Makefile.sub
FDTD_2D_ROOT = stencils/fdtd-2d
include $(POLYBENCH_ROOT)/$(FDTD_2D_ROOT)/Makefile.sub
HEAT_3D_ROOT = stencils/heat-3d
include $(POLYBENCH_ROOT)/$(HEAT_3D_ROOT)/Makefile.sub
JACOBI_1D_ROOT = stencils/jacobi-1d
include $(POLYBENCH_ROOT)/$(JACOBI_1D_ROOT)/Makefile.sub
JACOBI_2D_ROOT = stencils/jacobi-2d
include $(POLYBENCH_ROOT)/$(JACOBI_2D_ROOT)/Makefile.sub
SEIDEL_2D_ROOT = stencils/seidel-2d
include $(POLYBENCH_ROOT)/$(SEIDEL_2D_ROOT)/Makefile.sub

EXTRA_FLAGS=-lm

POLY_BENCHMARKS = \
	$(CORRELATION_ROOT) \
	$(COVARIANCE_ROOT) \
	$(GEMM_ROOT) \
	$(GEMVER_ROOT)\
	$(GESUMMV_ROOT) \
	$(SYMM_ROOT) \
	$(SYR2K_ROOT) \
	$(SYRK_ROOT) \
	$(TRMM_ROOT) \
	$(2MM_ROOT) \
	$(3MM_ROOT) \
	$(ATAX_ROOT) \
	$(BICG_ROOT) \
	$(DOITGEN_ROOT) \
	$(MVT_ROOT) \
	$(CHOLESKY_ROOT) \
	$(DURBIN_ROOT) \
	$(GRAMSCHMIDT_ROOT) \
	$(LU_ROOT) \
	$(LUDCMP_ROOT) \
	$(TRISOLV_ROOT) \
	$(DERICHE_ROOT) \
	$(FLOYD_WARSHALL_ROOT) \
	$(NUSSINOV_ROOT) \
	$(ADI_ROOT) \
	$(FDTD_2D_ROOT) \
	$(HEAT_3D_ROOT) \
	$(JACOBI_1D_ROOT) \
	$(JACOBI_2D_ROOT) \
	$(SEIDEL_2D_ROOT)


### COMPARE, TIME, SIZE

COMPILATION_TARGETS = \
	clang \
	gcc \
	jlc

COMP1 ?= jlc
COMP2 ?= clang
TARGET ?= $(COMP1)

.PHONY: polybench-compare
polybench-compare: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
	-DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_USE_C99_PROTO
polybench-compare: polybench-clean polybench-$(COMP1) polybench-$(COMP2)
	@$(foreach BENCHMARKDIR, $(POLY_BENCHMARKS), \
		$(eval BENCHMARK = $(notdir $(BENCHMARKDIR))) \
		$(eval DIFF = $(POLYBENCH_ROOT)/utilities/diff.sh) \
		\
		echo "$(BENCHMARK):" ; \
		echo "    Running $(COMP1) version" ; \
		$(POLYBENCH_BUILD)/$(BENCHMARKDIR)/$(COMP1).bin 2> /tmp/$(BENCHMARK)-$(COMP1).log ; \
		echo "    Running $(COMP2) version" ; \
		$(POLYBENCH_BUILD)/$(BENCHMARKDIR)/$(COMP2).bin 2> /tmp/$(BENCHMARK)-$(COMP2).log ; \
		$(DIFF) /tmp/$(BENCHMARK)-$(COMP1).log /tmp/$(BENCHMARK)-$(COMP2).log ; \
		rm -f /tmp/$(BENCHMARK)-$(COMP1).log ; \
		rm -f /tmp/$(BENCHMARK)-$(COMP2).log ; \
	)

.PHONY: polybench-check
polybench-check: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
	-DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_USE_C99_PROTO
polybench-check: polybench-clean polybench-$(COMP1)
	@set -e; \
	$(foreach BENCHMARKDIR, $(POLY_BENCHMARKS), \
		$(eval BENCHMARK = $(notdir $(BENCHMARKDIR))) \
		$(eval DIFF = $(POLYBENCH_ROOT)/utilities/md5-diff.sh) \
		\
		echo "$(BENCHMARK):" ; \
		echo "    Running $(COMP1) version" ; \
		$(POLYBENCH_BUILD)/$(BENCHMARKDIR)/$(COMP1).bin 2> /tmp/$(BENCHMARK)-$(COMP1).log ; \
		md5sum /tmp/$(BENCHMARK)-$(COMP1).log | cut -d" " -f1 > /tmp/$(BENCHMARK)-$(COMP1)-output.md5 ; \
		$(DIFF) /tmp/$(BENCHMARK)-$(COMP1)-output.md5 $(POLYBENCH_ROOT)/$(BENCHMARKDIR)/$(BENCHMARK)-output.md5 ; \
		rm -f /tmp/$(BENCHMARK)-$(COMP1).log ; \
		rm -f /tmp/$(BENCHMARK)-$(COMP1)-output.md5 ; \
	)


.PHONY: polybench-time
polybench-time: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
	-DPOLYBENCH_USE_C99_PROTO -DPOLYBENCH_TIME
polybench-time: polybench-clean-target $(POLYBENCH_RESULTS) polybench-$(TARGET)
	@$(foreach BENCHMARK, $(POLY_BENCHMARKS), \
		$(eval RESULTFILE = $(POLYBENCH_RESULTS)/$(notdir $(BENCHMARK))-$(TARGET)-time.txt) \
		\
		echo "$(BENCHMARK)/$(TARGET) > $(RESULTFILE)" ; \
		$(POLYBENCH_BUILD)/$(BENCHMARK)/$(TARGET).bin > $(RESULTFILE) ; \
	)

.PHONY: polybench-size
polybench-size: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
	-DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_USE_C99_PROTO
polybench-size: polybench-clean-target $(POLYBENCH_RESULTS) polybench-$(TARGET)
	@$(foreach BENCHMARK, $(POLY_BENCHMARKS), \
		$(eval RESULTFILE = $(POLYBENCH_RESULTS)/$(notdir $(BENCHMARK))-$(TARGET)-size.txt) \
		\
		size $(POLYBENCH_BUILD)/$(BENCHMARK)/$(TARGET).bin | tail -1 | cut -f1 | xargs > $(RESULTFILE) ; \
	)

# .PHONY: polybench-jlmstats
# polybench-jlmstats: LLCOPT = LLCO0
# polybench-jlmstats: PIPELINE = jlm-LLC
# polybench-jlmstats: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities --print-cfr-time
# polybench-jlmstats: polybench-clean $(POLYBENCH_RESULTS) jlm-LLCO0
# 	@rm -f $(POLYBENCH_JLMSTATS)
# 	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
# 		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
# 		\
# 		sed -e 's/$$/ $(BENCHMARK)/' -i $(BENCHMARK_ROOT)/jlmstats.log ; \
# 		cat $(BENCHMARK_ROOT)/jlmstats.log >> $(POLYBENCH_JLMSTATS) ; \
# 	)

.PHONY: polybench-timetable
polybench-timetable: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
	-DPOLYBENCH_USE_C99_PROTO -DPOLYBENCH_TIME
polybench-timetable: polybench-clean polybench
	@echo -n "# benchmark"
	@$(foreach TARGET, $(COMPILATION_TARGETS), \
		echo -n " $(TARGET)" ; \
	)
	@echo ""
	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
		\
		echo -n "$(BENCHMARK)" ; \
		$(foreach TARGET, $(COMPILATION_TARGETS), \
			TIME=`$(POLYBENCH_BUILD)/$(BENCHMARK_ROOT)/$(TARGET).bin` ; \
			echo -n " $${TIME}" ; \
		) \
		echo "" ; \
	)

.PHONY: polybench-sizetable
polybench-sizetable: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
	-DPOLYBENCH_USE_C99_PROTO
polybench-sizetable: polybench-clean polybench
	@echo -n "# benchmark "
	@$(foreach TARGET, $(COMPILATION_TARGETS), \
		echo -n " $(TARGET)" ; \
	)
	@echo ""
	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
		\
		echo -n "$(BENCHMARK)" ; \
		$(foreach TARGET, $(COMPILATION_TARGETS), \
			SIZE=`size $(POLYBENCH_BUILD)/$(BENCHMARK_ROOT)/$(TARGET).bin | tail -1 | cut -f1 | xargs`; \
			echo -n " $${SIZE}" ; \
		) \
		echo "" ; \
	)

$(POLYBENCH_RESULTS):
	mkdir -p $(POLYBENCH_RESULTS)

### CLEAN

.PHONY: polybench-clean
polybench-clean:
	@rm -rf $(POLYBENCH_BUILD)
	@rm -rf $(POLYBENCH_ROOT)/*/*/*.o
	@rm -rf $(POLYBENCH_ROOT)/*/*/*/*.o

.PHONY: polybench-clean-target
polybench-clean-target:
	@$(foreach BENCHMARK, $(POLY_BENCHMARKS), \
		rm -f $(POLYBENCH_BUILD)/$(BENCHMARK)/$(TARGET).bin ; \
	)

.PHONY: polybench-purge
polybench-purge: polybench-clean
	@rm -rf $(POLYBENCH_RESULTS)

### HELP

define HELP_TEXT_POLYBENCH_TARGETS
echo ""
echo "COMP1, COMP2, and TARGET can be set to one of the following options"
echo "--------------------------------------------------------------------------------"
echo "clang"
echo "gcc"
echo "jlc"
endef

############################################################################
# TARGETS FOR COMPILING ALL BENCHMARKS WITH DIFFERENT OPTIMIZATION OPTIONS #
############################################################################

.PHONY: polybench
polybench: polybench-clang polybench-gcc polybench-jlc

.PHONY: polybench-clang
polybench-clang: COMPILER = $(CLANG)
polybench-clang: CPPFLAGS += -O3 -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities -DPOLYBENCH_USE_C99_PROTO
polybench-clang: $(patsubst %, $(POLYBENCH_BUILD)/%/clang.bin, $(POLY_BENCHMARKS))

.PHONY: polybench-gcc
polybench-gcc: COMPILER = gcc
polybench-gcc: CPPFLAGS += -O3 -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities -DPOLYBENCH_USE_C99_PROTO
polybench-gcc: $(patsubst %, $(POLYBENCH_BUILD)/%/gcc.bin, $(POLY_BENCHMARKS))

.PHONY: polybench-jlc
polybench-jlc: COMPILER = $(JLC)
polybench-jlc: CPPFLAGS += -O3 -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities -DPOLYBENCH_USE_C99_PROTO
polybench-jlc: $(patsubst %, $(POLYBENCH_BUILD)/%/jlc.bin, $(POLY_BENCHMARKS))
