define HELP_TEXT_POLYBENCH
echo ""
echo "Polybench Make Targets"
echo "--------------------------------------------------------------------------------"
echo "polybench              Compiles all targets for all benchmarks"
echo "polybench-clean        Runs clean for each benchmark"
echo "polybench-purge        Like polybench-clean but also deletes results directory"
echo "polybench-compare      Runs two compiled versions and compares their outputs"
echo "                       The versions to compare is defined by COMP1 and COMP2"
echo "polybench-time         Collects the execution time of specified target."
echo "                       Default target is COMP1 but can also be set by TARGET"
echo "                       Collected results are stored in $(POLYBENCH_RESULTS)"
echo "polybench-timetable    Collects the excution time for all benchmarks and targets"
echo "polybench-size         Collects the text size of sepcified target."
echo "                       Default target is COMP1 but can also be set by TARGET"
echo "                       Collected results are stored in $(POLYBENCH_RESULTS)"
echo "polybench-sizetable    Collects the text size for all benchmarks and targets"
echo "polybench-jlmstats     Collects JLM compilation metrics for all benchmarks."
echo "polybench-help         Prints possible options for COMP1, COMP2, and TARGET"
endef

.PHONY: polybench-help
polybench-help:
	@$(HELP_TEXT_POLYBENCH_TARGETS)

CC=clang
CPPFLAGS = -I. -Iutilities/

POLYBENCH_RESULTS = $(POLYBENCH_ROOT)/results
POLYBENCH_JLMSTATS = $(POLYBENCH_RESULTS)/jlmstats.log

CORRELATION_ROOT = $(POLYBENCH_ROOT)/datamining/correlation
include $(CORRELATION_ROOT)/Makefile.sub
COVARIANCE_ROOT = $(POLYBENCH_ROOT)/datamining/covariance
include $(COVARIANCE_ROOT)/Makefile.sub

GEMM_ROOT = $(POLYBENCH_ROOT)/linear-algebra/blas/gemm
include $(GEMM_ROOT)/Makefile.sub
GEMVER_ROOT = $(POLYBENCH_ROOT)/linear-algebra/blas/gemver
include $(GEMVER_ROOT)/Makefile.sub
GESUMMV_ROOT = $(POLYBENCH_ROOT)/linear-algebra/blas/gesummv
include $(GESUMMV_ROOT)/Makefile.sub
SYMM_ROOT = $(POLYBENCH_ROOT)/linear-algebra/blas/symm
include $(SYMM_ROOT)/Makefile.sub
SYR2K_ROOT = $(POLYBENCH_ROOT)/linear-algebra/blas/syr2k
include $(SYR2K_ROOT)/Makefile.sub
SYRK_ROOT = $(POLYBENCH_ROOT)/linear-algebra/blas/syrk
include $(SYRK_ROOT)/Makefile.sub
TRMM_ROOT = $(POLYBENCH_ROOT)/linear-algebra/blas/trmm
include $(TRMM_ROOT)/Makefile.sub

2MM_ROOT = $(POLYBENCH_ROOT)/linear-algebra/kernels/2mm
include $(2MM_ROOT)/Makefile.sub
3MM_ROOT = $(POLYBENCH_ROOT)/linear-algebra/kernels/3mm
include $(3MM_ROOT)/Makefile.sub
ATAX_ROOT = $(POLYBENCH_ROOT)/linear-algebra/kernels/atax
include $(ATAX_ROOT)/Makefile.sub
BICG_ROOT = $(POLYBENCH_ROOT)/linear-algebra/kernels/bicg
include $(BICG_ROOT)/Makefile.sub
DOITGEN_ROOT = $(POLYBENCH_ROOT)/linear-algebra/kernels/doitgen
include $(DOITGEN_ROOT)/Makefile.sub
MVT_ROOT = $(POLYBENCH_ROOT)/linear-algebra/kernels/mvt
include $(MVT_ROOT)/Makefile.sub

CHOLESKY_ROOT = $(POLYBENCH_ROOT)/linear-algebra/solvers/cholesky
include $(CHOLESKY_ROOT)/Makefile.sub
DURBIN_ROOT = $(POLYBENCH_ROOT)/linear-algebra/solvers/durbin
include $(DURBIN_ROOT)/Makefile.sub
GRAMSCHMIDT_ROOT = $(POLYBENCH_ROOT)/linear-algebra/solvers/gramschmidt
include $(GRAMSCHMIDT_ROOT)/Makefile.sub
LU_ROOT = $(POLYBENCH_ROOT)/linear-algebra/solvers/lu
include $(LU_ROOT)/Makefile.sub
LUDCMP_ROOT = $(POLYBENCH_ROOT)/linear-algebra/solvers/ludcmp
include $(LUDCMP_ROOT)/Makefile.sub
TRISOLV_ROOT = $(POLYBENCH_ROOT)/linear-algebra/solvers/trisolv
include $(TRISOLV_ROOT)/Makefile.sub

DERICHE_ROOT = $(POLYBENCH_ROOT)/medley/deriche
include $(DERICHE_ROOT)/Makefile.sub
FLOYD_WARSHALL_ROOT = $(POLYBENCH_ROOT)/medley/floyd-warshall
include $(FLOYD_WARSHALL_ROOT)/Makefile.sub
NUSSINOV_ROOT = $(POLYBENCH_ROOT)/medley/nussinov
include $(NUSSINOV_ROOT)/Makefile.sub

ADI_ROOT = $(POLYBENCH_ROOT)/stencils/adi
include $(ADI_ROOT)/Makefile.sub
FDTD_2D_ROOT = $(POLYBENCH_ROOT)/stencils/fdtd-2d
include $(FDTD_2D_ROOT)/Makefile.sub
HEAT_3D_ROOT = $(POLYBENCH_ROOT)/stencils/heat-3d
include $(HEAT_3D_ROOT)/Makefile.sub
JACOBI_1D_ROOT = $(POLYBENCH_ROOT)/stencils/jacobi-1d
include $(JACOBI_1D_ROOT)/Makefile.sub
JACOBI_2D_ROOT = $(POLYBENCH_ROOT)/stencils/jacobi-2d
include $(JACOBI_2D_ROOT)/Makefile.sub
SEIDEL_2D_ROOT = $(POLYBENCH_ROOT)/stencils/seidel-2d
include $(SEIDEL_2D_ROOT)/Makefile.sub

EXTRA_FLAGS=-lm

POLY_BENCHMARKS = \
	$(CORRELATION_ROOT) \
	$(COVARIANCE_ROOT) \
	$(GEMM_ROOT) \
	$(GEMVER_ROOT)\
	$(GESUMMV_ROOT) \
	$(SYMM_ROOT) \
	$(SYR2K_ROOT) \
	$(SYRK_ROOT) \
	$(TRMM_ROOT) \
	$(2MM_ROOT) \
	$(3MM_ROOT) \
	$(ATAX_ROOT) \
	$(BICG_ROOT) \
	$(DOITGEN_ROOT) \
	$(MVT_ROOT) \
	$(CHOLESKY_ROOT) \
	$(DURBIN_ROOT) \
	$(GRAMSCHMIDT_ROOT) \
	$(LU_ROOT) \
	$(LUDCMP_ROOT) \
	$(TRISOLV_ROOT) \
	$(DERICHE_ROOT) \
	$(FLOYD_WARSHALL_ROOT) \
	$(NUSSINOV_ROOT) \
	$(ADI_ROOT) \
	$(FDTD_2D_ROOT) \
	$(HEAT_3D_ROOT) \
	$(JACOBI_1D_ROOT) \
	$(JACOBI_2D_ROOT) \
	$(SEIDEL_2D_ROOT)

COMPILATION_TARGETS = \
	OPTO0-LLCO0 \
	OPTO0-LLCO1 \
	OPTO0-LLCO3 \
	OPTO0-LLCO0-stripped \
	OPTO0-LLCO3-stripped \
	\
	OPTO1-LLCO0 \
	OPTO1-LLCO1 \
	OPTO1-LLCO3 \
	OPTO1-LLCO0-stripped \
	OPTO1-LLCO3-stripped \
	\
	OPTO2-LLCO0 \
	OPTO2-LLCO1 \
	OPTO2-LLCO3 \
	OPTO2-LLCO0-stripped \
	OPTO2-LLCO3-stripped \
	\
	OPTO3-LLCO0 \
	OPTO3-LLCO1 \
	OPTO3-LLCO3 \
	OPTO3-LLCO0-stripped \
	OPTO3-LLCO3-stripped \
	\
	OPTO3-no-vec-LLCO0 \
	OPTO3-no-vec-LLCO3 \
	OPTO3-no-vec-LLCO0-stripped \
	OPTO3-no-vec-LLCO3-stripped \
	\
	OPTOs-LLCO0 \
	OPTOs-LLCO1 \
	OPTOs-LLCO3 \
	OPTOs-LLCO0-stripped \
	OPTOs-LLCO3-stripped \
	\
	jlm-LLCO0 \
	jlm-LLCO1 \
	jlm-LLCO3 \
	\
	jlm-no-unroll-LLCO3 \
	jlm-no-opt-LLCO3 \
	clang \
	gcc \

### COMPARE, TIME, SIZE

COMP1 ?= jlm-LLCO0
COMP2 ?= OPTO3-LLCO3
TARGET ?= $(COMP1)

.PHONY: polybench-compare
polybench-compare: CPPFLAGS += -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_USE_C99_PROTO
polybench-compare: llvm-strip polybench-clean $(COMP1) $(COMP2)
	@$(foreach BENCHMARKDIR, $(POLY_BENCHMARKS), \
		$(eval BENCHMARK = $(notdir $(BENCHMARKDIR))) \
		$(eval DIFF = $(POLYBENCH_ROOT)/utilities/diff.sh) \
		\
		echo "$(BENCHMARK):" ; \
		echo "    Running $(COMP1) version" ; \
		$(BENCHMARKDIR)/$(COMP1) 2> /tmp/$(notdir $(BENCHMARK))-$(COMP1).log ; \
		echo "    Running $(COMP2) version" ; \
		$(BENCHMARKDIR)/$(COMP2) 2> /tmp/$(notdir $(BENCHMARK))-$(COMP2).log ; \
		$(DIFF) /tmp/$(BENCHMARK)-$(COMP1).log /tmp/$(BENCHMARK)-$(COMP2).log ; \
		rm -f /tmp/$(BENCHMARK)-$(COMP1).log ; \
		rm -f /tmp/$(BENCHMARK)-$(COMP2).log ; \
	)

.PHONY: polybench-time
polybench-time: CPPFLAGS += -DPOLYBENCH_USE_C99_PROTO -DPOLYBENCH_TIME
polybench-time: llvm-strip polybench-clean-target $(POLYBENCH_RESULTS) $(TARGET)
	@$(foreach BENCHMARK, $(POLY_BENCHMARKS), \
		$(eval RESULTFILE = $(POLYBENCH_RESULTS)/$(notdir $(BENCHMARK))-$(TARGET)-time.txt) \
		\
		echo "$(BENCHMARK)/$(TARGET) > $(RESULTFILE)" ; \
		$(BENCHMARK)/$(TARGET) > $(RESULTFILE) ; \
	)

.PHONY: polybench-size
polybench-size: CPPFLAGS += -DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_USE_C99_PROTO
polybench-size: llvm-strip polybench-clean-target $(POLYBENCH_RESULTS) $(TARGET)
	@$(foreach BENCHMARK, $(POLY_BENCHMARKS), \
		$(eval RESULTFILE = $(POLYBENCH_RESULTS)/$(notdir $(BENCHMARK))-$(TARGET)-size.txt) \
		\
		size $(BENCHMARK)/$(TARGET) | tail -1 | cut -f1 | xargs > $(RESULTFILE) ; \
	)

.PHONY: polybench-jlmstats
polybench-jlmstats: LLCOPT = LLCO0
polybench-jlmstats: PIPELINE = jlm-LLC
polybench-jlmstats: CPPFLAGS += --print-cfr-time
polybench-jlmstats: llvm-strip polybench-clean $(POLYBENCH_RESULTS) jlm-LLCO0
	@rm -f $(POLYBENCH_JLMSTATS)
	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
		\
		sed -e 's/$$/ $(BENCHMARK)/' -i $(BENCHMARK_ROOT)/jlmstats.log ; \
		cat $(BENCHMARK_ROOT)/jlmstats.log >> $(POLYBENCH_JLMSTATS) ; \
	)

.PHONY: polybench-timetable
polybench-timetable: CPPFLAGS += -DPOLYBENCH_USE_C99_PROTO -DPOLYBENCH_TIME
polybench-timetable: polybench-clean polybench
	@echo -n "# benchmark "
	@$(foreach TARGET, $(COMPILATION_TARGETS), \
		echo -n "$(TARGET)" ; \
	)
	@echo ""
	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
		\
		echo -n "$(BENCHMARK)" ; \
		$(foreach TARGET, $(COMPILATION_TARGETS), \
			TIME=`$(BENCHMARK_ROOT)/$(TARGET)` ; \
			echo -n " $${TIME}" ; \
		) \
		echo "" ; \
	)

.PHONY: polybench-sizetable
polybench-sizetable: CPPFLAGS += -DPOLYBENCH_USE_C99_PROTO
polybench-sizetable: polybench-clean polybench
	@echo -n "# benchmark "
	@$(foreach TARGET, $(COMPILATION_TARGETS), \
		echo -n "$(TARGET)" ; \
	)
	@echo ""
	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
		\
		echo -n "$(BENCHMARK)" ; \
		$(foreach TARGET, $(COMPILATION_TARGETS), \
			SIZE=`size $(BENCHMARK_ROOT)/$(TARGET) | tail -1 | cut -f1 | xargs`; \
			echo -n " $${SIZE}" ; \
		) \
		echo "" ; \
	)

$(POLYBENCH_RESULTS):
	mkdir -p $(POLYBENCH_RESULTS)

### CLEAN

.PHONY: polybench-clean
polybench-clean:
	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
		rm -f $(BENCHMARK_ROOT)/clang ; \
		rm -f $(BENCHMARK_ROOT)/gcc ; \
		rm -f $(BENCHMARK_ROOT)/jlm-* ; \
		rm -f $(BENCHMARK_ROOT)/OPTO* ; \
		rm -f $(BENCHMARK_ROOT)/*.rvsdg ; \
		rm -f $(BENCHMARK_ROOT)/*.ll ; \
		rm -f $(BENCHMARK_ROOT)/*.o ; \
		rm -f $(BENCHMARK_ROOT)/jlmstats.log ; \
	)

.PHONY: polybench-clean-target
polybench-clean-target:
	@$(foreach BENCHMARK, $(POLY_BENCHMARKS), \
		rm -f $(BENCHMARK)/$(TARGET) ; \
	)

.PHONY: polybench-purge
polybench-purge: polybench-clean llvm-strip-clean
	@rm -rf $(POLYBENCH_RESULTS)

### ALL

.PHONY: polybench
polybench: llvm-strip $(COMPILATION_TARGETS)

############################################################################
# TARGETS FOR COMPILING ALL BENCHMARKS WITH DIFFERENT OPTIMIZATION OPTIONS #
############################################################################

### CLANG

.PHONY: clang
clang: $(patsubst %, %/clang, $(POLY_BENCHMARKS))

### GCC

.PHONY: gcc
gcc: $(patsubst %, %/gcc, $(POLY_BENCHMARKS))

### JLM

.PHONY: jlm-LLCO0
jlm-LLCO0: LLCOPT=LLCO0
jlm-LLCO0: PIPELINE=jlm-LLC
jlm-LLCO0: JLMFLAGS ?= -Jiln -Jinv -Jred -Jdne -Jivt -Jinv -Jdne -Jpsh -Jinv -Jdne -Jurl -Jinv -Jred -Jcne -Jdne -Jpll -Jinv -Jdne
jlm-LLCO0: $(patsubst %, %/jlm-LLCO0, $(POLY_BENCHMARKS))

.PHONY: jlm-LLCO1
jlm-LLCO1: LLCOPT=LLCO1
jlm-LLCO1: PIPELINE=jlm-LLC
jlm-LLCO1: JLMFLAGS ?= -Jiln -Jinv -Jred -Jdne -Jivt -Jinv -Jdne -Jpsh -Jinv -Jdne -Jurl -Jinv -Jred -Jcne -Jdne -Jpll -Jinv -Jdne
jlm-LLCO1: $(patsubst %, %/jlm-LLCO1, $(POLY_BENCHMARKS))

.PHONY: jlm-LLCO3
jlm-LLCO3: LLCOPT=LLCO3
jlm-LLCO3: PIPELINE=jlm-LLC
jlm-LLCO3: JLMFLAGS ?= -Jiln -Jinv -Jred -Jdne -Jivt -Jinv -Jdne -Jpsh -Jinv -Jdne -Jurl -Jinv -Jred -Jcne -Jdne -Jpll -Jinv -Jdne
jlm-LLCO3: $(patsubst %, %/jlm-LLCO3, $(POLY_BENCHMARKS))

.PHONY: jlm-no-unroll-LLCO3
jlm-no-unroll-LLCO3: LLCOPT = LLCO3
jlm-no-unroll-LLCO3: PIPELINE = jlm-LLC
jlm-no-unroll-LLCO3: JLMFLAGS ?= -Jiln -Jinv -Jred -Jdne -Jivt -Jinv -Jdne -Jpsh -Jinv -Jdne -Jinv -Jred -Jcne -Jdne -Jpll -Jinv -Jdne
jlm-no-unroll-LLCO3: $(patsubst %, %/jlm-no-unroll-LLCO3, $(POLY_BENCHMARKS))

.PHONY: jlm-LLCO3
jlm-no-opt-LLCO3: LLCOPT = LLCO3
jlm-no-opt-LLCO3: PIPELINE = jlm-LLC
jlm-no-opt-LLCO3: JLMFLAGS =
jlm-no-opt-LLCO3: $(patsubst %, %/jlm-no-opt-LLCO3, $(POLY_BENCHMARKS))

### OPT0

.PHONY: OPTO0-LLCO0
OPTO0-LLCO0: LLCOPT = LLCO0
OPTO0-LLCO0: PIPELINE = opt-LLC
OPTO0-LLCO0: LLVMOPT = -O0 --no-strip
OPTO0-LLCO0: $(patsubst %, %/OPTO0-LLCO0, $(POLY_BENCHMARKS))

.PHONY: OPTO0-LLCO1
OPTO0-LLCO1: LLCOPT = LLCO1
OPTO0-LLCO1: PIPELINE = opt-LLC
OPTO0-LLCO1: LLVMOPT = -O0 --no-strip
OPTO0-LLCO1: $(patsubst %, %/OPTO0-LLCO1, $(POLY_BENCHMARKS))

.PHONY: OPTO0-LLCO3
OPTO0-LLCO3: LLCOPT = LLCO3
OPTO0-LLCO3: PIPELINE = opt-LLC
OPTO0-LLCO3: LLVMOPT = -O0 --no-strip
OPTO0-LLCO3: $(patsubst %, %/OPTO0-LLCO3, $(POLY_BENCHMARKS))

### OPT0 stripped

.PHONY: OPTO0-LLCO0-stripped
OPTO0-LLCO0-stripped: LLCOPT = LLCO0
OPTO0-LLCO0-stripped: PIPELINE = opt-LLC
OPTO0-LLCO0-stripped: LLVMOPT = -O0
OPTO0-LLCO0-stripped: $(patsubst %, %/OPTO0-LLCO0-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO0-LLCO1-stripped
OPTO0-LLCO1-stripped: LLCOPT = LLCO1
OPTO0-LLCO1-stripped: PIPELINE = opt-LLC
OPTO0-LLCO1-stripped: LLVMOPT = -O0
OPTO0-LLCO1-stripped: $(patsubst %, %/OPTO0-LLCO1-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO0-LLCO3-stripped
OPTO0-LLCO3-stripped: LLCOPT = LLCO3
OPTO0-LLCO3-stripped: PIPELINE = opt-LLC
OPTO0-LLCO3-stripped: LLVMOPT = -O0
OPTO0-LLCO3-stripped: $(patsubst %, %/OPTO0-LLCO3-stripped, $(POLY_BENCHMARKS))

### OPT1

.PHONY: OPTO1-LLCO0
OPTO1-LLCO0: LLCOPT = LLCO0
OPTO1-LLCO0: PIPELINE = opt-LLC
OPTO1-LLCO0: LLVMOPT = -O1 --no-strip
OPTO1-LLCO0: $(patsubst %, %/OPTO1-LLCO0, $(POLY_BENCHMARKS))

.PHONY: OPTO1-LLCO1
OPTO1-LLCO1: LLCOPT = LLCO1
OPTO1-LLCO1: PIPELINE = opt-LLC
OPTO1-LLCO1: LLVMOPT = -O1 --no-strip
OPTO1-LLCO1: $(patsubst %, %/OPTO1-LLCO1, $(POLY_BENCHMARKS))

.PHONY: OPTO1-LLCO3
OPTO1-LLCO3: LLCOPT = LLCO3
OPTO1-LLCO3: PIPELINE = opt-LLC
OPTO1-LLCO3: LLVMOPT = -O1 --no-strip
OPTO1-LLCO3: $(patsubst %, %/OPTO1-LLCO3, $(POLY_BENCHMARKS))

### OPT1 stripped

.PHONY: OPTO1-LLCO0-stripped
OPTO1-LLCO0-stripped: LLCOPT = LLCO0
OPTO1-LLCO0-stripped: PIPELINE = opt-LLC
OPTO1-LLCO0-stripped: LLVMOPT = -O1
OPTO1-LLCO0-stripped: $(patsubst %, %/OPTO1-LLCO0-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO1-LLCO1-stripped
OPTO1-LLCO1-stripped: LLCOPT = LLCO1
OPTO1-LLCO1-stripped: PIPELINE = opt-LLC
OPTO1-LLCO1-stripped: LLVMOPT = -O1
OPTO1-LLCO1-stripped: $(patsubst %, %/OPTO1-LLCO1-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO1-LLCO3-stripped
OPTO1-LLCO3-stripped: LLCOPT = LLCO3
OPTO1-LLCO3-stripped: PIPELINE = opt-LLC
OPTO1-LLCO3-stripped: LLVMOPT = -O1
OPTO1-LLCO3-stripped: $(patsubst %, %/OPTO1-LLCO3-stripped, $(POLY_BENCHMARKS))

### OPT2

.PHONY: OPTO2-LLCO0
OPTO2-LLCO0: LLCOPT = LLCO0
OPTO2-LLCO0: PIPELINE = opt-LLC
OPTO2-LLCO0: LLVMOPT = -O2 --no-strip
OPTO2-LLCO0: $(patsubst %, %/OPTO2-LLCO0, $(POLY_BENCHMARKS))

.PHONY: OPTO2-LLCO1
OPTO2-LLCO1: LLCOPT = LLCO1
OPTO2-LLCO1: PIPELINE = opt-LLC
OPTO2-LLCO1: LLVMOPT = -O2 --no-strip
OPTO2-LLCO1: $(patsubst %, %/OPTO2-LLCO1, $(POLY_BENCHMARKS))

.PHONY: OPTO2-LLCO3
OPTO2-LLCO3: LLCOPT = LLCO3
OPTO2-LLCO3: PIPELINE = opt-LLC
OPTO2-LLCO3: LLVMOPT = -O2 --no-strip
OPTO2-LLCO3: $(patsubst %, %/OPTO2-LLCO3, $(POLY_BENCHMARKS))

### OPT2 stripped

.PHONY: OPTO2-LLCO0-stripped
OPTO2-LLCO0-stripped: LLCOPT = LLCO0
OPTO2-LLCO0-stripped: PIPELINE = opt-LLC
OPTO2-LLCO0-stripped: LLVMOPT = -O2
OPTO2-LLCO0-stripped: $(patsubst %, %/OPTO2-LLCO0-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO2-LLCO1-stripped
OPTO2-LLCO1-stripped: LLCOPT = LLCO1
OPTO2-LLCO1-stripped: PIPELINE = opt-LLC
OPTO2-LLCO1-stripped: LLVMOPT = -O2
OPTO2-LLCO1-stripped: $(patsubst %, %/OPTO2-LLCO1-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO2-LLCO3-stripped
OPTO2-LLCO3-stripped: LLCOPT = LLCO3
OPTO2-LLCO3-stripped: PIPELINE = opt-LLC
OPTO2-LLCO3-stripped: LLVMOPT = -O2
OPTO2-LLCO3-stripped: $(patsubst %, %/OPTO2-LLCO3-stripped, $(POLY_BENCHMARKS))

### OPT3

.PHONY: OPTO3-LLCO0
OPTO3-LLCO0: LLCOPT = LLCO0
OPTO3-LLCO0: PIPELINE = opt-LLC
OPTO3-LLCO0: LLVMOPT = -O3 --no-strip
OPTO3-LLCO0: $(patsubst %, %/OPTO3-LLCO0, $(POLY_BENCHMARKS))

.PHONY: OPTO3-LLCO1
OPTO3-LLCO1: LLCOPT = LLCO1
OPTO3-LLCO1: PIPELINE = opt-LLC
OPTO3-LLCO1: LLVMOPT = -O3 --no-strip
OPTO3-LLCO1: $(patsubst %, %/OPTO3-LLCO1, $(POLY_BENCHMARKS))

.PHONY: OPTO3-LLCO3
OPTO3-LLCO3: LLCOPT = LLCO3
OPTO3-LLCO3: PIPELINE = opt-LLC
OPTO3-LLCO3: LLVMOPT = -O3 --no-strip
OPTO3-LLCO3: $(patsubst %, %/OPTO3-LLCO3, $(POLY_BENCHMARKS))

### OPT3 stripped

.PHONY: OPTO3-LLCO0-stripped
OPTO3-LLCO0-stripped: LLCOPT = LLCO0
OPTO3-LLCO0-stripped: PIPELINE = opt-LLC
OPTO3-LLCO0-stripped: LLVMOPT = -O3
OPTO3-LLCO0-stripped: $(patsubst %, %/OPTO3-LLCO0-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO3-LLCO1-stripped
OPTO3-LLCO1-stripped: LLCOPT = LLCO1
OPTO3-LLCO1-stripped: PIPELINE = opt-LLC
OPTO3-LLCO1-stripped: LLVMOPT = -O3
OPTO3-LLCO1-stripped: $(patsubst %, %/OPTO3-LLCO1-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO3-LLCO3-stripped
OPTO3-LLCO3-stripped: LLCOPT = LLCO3
OPTO3-LLCO3-stripped: PIPELINE = opt-LLC
OPTO3-LLCO3-stripped: LLVMOPT = -O3
OPTO3-LLCO3-stripped: $(patsubst %, %/OPTO3-LLCO3-stripped, $(POLY_BENCHMARKS))

### OPT3 no-vec

NO_VEC = $(shell ./print-llvm-opts.py | sed 's/-V-loop-vectorize //' | sed 's/-V-slp-vectorize //')

.PHONY: OPTO3-no-vec-LLCO0
OPTO3-no-vec-LLCO0: LLCOPT = LLCO0
OPTO3-no-vec-LLCO0: PIPELINE = opt-LLC
OPTO3-no-vec-LLCO0: LLVMOPT = $(NO_VEC) --no-strip
OPTO3-no-vec-LLCO0: $(patsubst %, %/OPTO3-no-vec-LLCO0, $(POLY_BENCHMARKS))

.PHONY: OPTO3-no-vec-LLCO1
OPTO3-no-vec-LLCO1: LLCOPT = LLCO1
OPTO3-no-vec-LLCO1: PIPELINE = opt-LLC
OPTO3-no-vec-LLCO0: LLVMOPT = $(NO_VEC) --no-strip
OPTO3-no-vec-LLCO1: $(patsubst %, %/OPTO3-no-vec-LLCO1, $(POLY_BENCHMARKS))

.PHONY: OPTO3-no-vec-LLCO3
OPTO3-no-vec-LLCO3: LLCOPT = LLCO3
OPTO3-no-vec-LLCO3: PIPELINE = opt-LLC
OPTO3-no-vec-LLCO0: LLVMOPT = $(NO_VEC) --no-strip
OPTO3-no-vec-LLCO3: $(patsubst %, %/OPTO3-no-vec-LLCO3, $(POLY_BENCHMARKS))

### OPT3 no-vec stripped

.PHONY: OPTO3-no-vec-LLCO0-stripped
OPTO3-no-vec-LLCO0-stripped: LLCOPT = LLCO0
OPTO3-no-vec-LLCO0-stripped: PIPELINE = opt-LLC
OPTO3-no-vec-LLCO0-stripped: LLVMOPT = $(NO_VEC)
OPTO3-no-vec-LLCO0-stripped: $(patsubst %, %/OPTO3-no-vec-LLCO0-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO3-no-vec-LLCO1-stripped
OPTO3-no-vec-LLCO1-stripped: LLCOPT = LLCO1
OPTO3-no-vec-LLCO1-stripped: PIPELINE = opt-LLC
OPTO3-no-vec-LLCO0-stripped: LLVMOPT = $(NO_VEC)
OPTO3-no-vec-LLCO1-stripped: $(patsubst %, %/OPTO3-no-vec-LLCO1-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTO3-no-vec-LLCO3-stripped
OPTO3-no-vec-LLCO3-stripped: LLCOPT = LLCO3
OPTO3-no-vec-LLCO3-stripped: PIPELINE = opt-LLC
OPTO3-no-vec-LLCO0-stripped: LLVMOPT = $(NO_VEC)
OPTO3-no-vec-LLCO3-stripped: $(patsubst %, %/OPTO3-no-vec-LLCO3-stripped, $(POLY_BENCHMARKS))

### OPTs

.PHONY: OPTOs-LLCO0
OPTOs-LLCO0: LLCOPT = LLCO0
OPTOs-LLCO0: PIPELINE = opt-LLC
OPTOs-LLCO0: LLVMOPT = -Os --no-strip
OPTOs-LLCO0: $(patsubst %, %/OPTOs-LLCO0, $(POLY_BENCHMARKS))

.PHONY: OPTOs-LLCO1
OPTOs-LLCO1: LLCOPT = LLCO1
OPTOs-LLCO1: PIPELINE = opt-LLC
OPTOs-LLCO1: LLVMOPT = -Os --no-strip
OPTOs-LLCO1: $(patsubst %, %/OPTOs-LLCO1, $(POLY_BENCHMARKS))

.PHONY: OPTOs-LLCO3
OPTOs-LLCO3: LLCOPT = LLCO3
OPTOs-LLCO3: PIPELINE = opt-LLC
OPTOs-LLCO3: LLVMOPT = -Os --no-strip
OPTOs-LLCO3: $(patsubst %, %/OPTOs-LLCO3, $(POLY_BENCHMARKS))

### OPTs stripped

.PHONY: OPTOs-LLCO0-stripped
OPTOs-LLCO0-stripped: LLCOPT = LLCO0
OPTOs-LLCO0-stripped: PIPELINE = opt-LLC
OPTOs-LLCO0-stripped: LLVMOPT = -Os
OPTOs-LLCO0-stripped: $(patsubst %, %/OPTOs-LLCO0-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTOs-LLCO1-stripped
OPTOs-LLCO1-stripped: LLCOPT = LLCO1
OPTOs-LLCO1-stripped: PIPELINE = opt-LLC
OPTOs-LLCO1-stripped: LLVMOPT = -Os
OPTOs-LLCO1-stripped: $(patsubst %, %/OPTOs-LLCO1-stripped, $(POLY_BENCHMARKS))

.PHONY: OPTOs-LLCO3-stripped
OPTOs-LLCO3-stripped: LLCOPT = LLCO3
OPTOs-LLCO3-stripped: PIPELINE = opt-LLC
OPTOs-LLCO3-stripped: LLVMOPT = -Os
OPTOs-LLCO3-stripped: $(patsubst %, %/OPTOs-LLCO3-stripped, $(POLY_BENCHMARKS))

### HELP

define HELP_TEXT_POLYBENCH_TARGETS
echo ""
echo "COMP1, COMP2 and TARGET can be set to one of the following options"
echo "--------------------------------------------------------------------------------"
echo "OPTO0-LLCO0"
echo "OPTO0-LLCO1"
echo "OPTO0-LLCO3"
echo "OPTO0-LLCO0-stripped"
echo "OPTO0-LLCO3-stripped"
echo ""
echo "OPTO1-LLCO0"
echo "OPTO1-LLCO1"
echo "OPTO1-LLCO3"
echo "OPTO1-LLCO0-stripped"
echo "OPTO1-LLCO3-stripped"
echo ""
echo "OPTO2-LLCO0"
echo "OPTO2-LLCO1"
echo "OPTO2-LLCO3"
echo "OPTO2-LLCO0-stripped"
echo "OPTO2-LLCO3-stripped"
echo ""
echo "OPTO3-LLCO0"
echo "OPTO3-LLCO1"
echo "OPTO3-LLCO3"
echo "OPTO3-LLCO0-stripped"
echo "OPTO3-LLCO3-stripped"
echo ""
echo "OPTO3-no-vec-LLCO0"
echo "OPTO3-no-vec-LLCO3"
echo "OPTO3-no-vec-LLCO0-stripped"
echo "OPTO3-no-vec-LLCO3-stripped"
echo ""
echo "OPTOs-LLCO0"
echo "OPTOs-LLCO1"
echo "OPTOs-LLCO3"
echo "OPTOs-LLCO0-stripped"
echo "OPTOs-LLCO3-stripped"
echo ""
echo "jlm-LLCO0"
echo "jlm-LLCO1"
echo "jlm-LLCO3"
echo ""
echo "jlm-no-unroll-LLCO3"
echo "jlm-no-opt-LLCO3"
echo ""
echo "clang"
echo "gcc"
endef
