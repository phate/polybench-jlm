define HELP_TEXT_POLYBENCH
echo ""
echo "Polybench Make Targets"
echo "--------------------------------------------------------------------------------"
echo "polybench              Compiles all targets for all benchmarks"
echo "polybench-clean        Runs clean for each benchmark"
echo "polybench-purge        Like polybench-clean but also deletes results directory"
echo "polybench-compare      Runs two compiled versions and compares their outputs"
echo "                       The versions to compare is defined by COMP1 and COMP2"
echo "polybench-check        Runs jlc compiled versions and checks md5 output"
#echo "polybench-time         Collects the execution time of specified target."
#echo "                       Default target is COMP1 but can also be set by TARGET"
#echo "                       Collected results are stored in $(POLYBENCH_RESULTS)"
#echo "polybench-timetable    Collects the excution time for all benchmarks and targets"
#echo "polybench-size         Collects the text size of sepcified target."
#echo "                       Default target is COMP1 but can also be set by TARGET"
#echo "                       Collected results are stored in $(POLYBENCH_RESULTS)"
#echo "polybench-sizetable    Collects the text size for all benchmarks and targets"
#echo "polybench-jlmstats     Collects JLM compilation metrics for all benchmarks."
echo "polybench-help         Prints possible options for COMP1, COMP2, and TARGET"
endef

.PHONY: polybench-help
polybench-help:
	@$(HELP_TEXT_POLYBENCH_TARGETS)

CC=clang

POLYBENCH_BUILD = $(POLYBENCH_ROOT)/build
POLYBENCH_RESULTS = $(POLYBENCH_ROOT)/results
POLYBENCH_JLMSTATS = $(POLYBENCH_RESULTS)/jlmstats.log

POLYBENCH_SRC = \
	datamining/correlation/correlation.c \
	datamining/covariance/covariance.c \
	linear-algebra/blas/gemm/gemm.c \
	linear-algebra/blas/gemver/gemver.c \
	linear-algebra/blas/gesummv/gesummv.c \
	linear-algebra/blas/symm/symm.c \
	linear-algebra/blas/syr2k/syr2k.c \
	linear-algebra/blas/syrk/syrk.c \
	linear-algebra/blas/trmm/trmm.c \
	linear-algebra/kernels/2mm/2mm.c \
	linear-algebra/kernels/3mm/3mm.c \
	linear-algebra/kernels/atax/atax.c \
	linear-algebra/kernels/bicg/bicg.c \
	linear-algebra/kernels/doitgen/doitgen.c \
	linear-algebra/kernels/mvt/mvt.c \
	linear-algebra/solvers/cholesky/cholesky.c \
	linear-algebra/solvers/durbin/durbin.c \
	linear-algebra/solvers/gramschmidt/gramschmidt.c \
	linear-algebra/solvers/lu/lu.c \
	linear-algebra/solvers/ludcmp/ludcmp.c \
	linear-algebra/solvers/trisolv/trisolv.c \
	medley/deriche/deriche.c \
	medley/floyd-warshall/floyd-warshall.c \
	medley/nussinov/nussinov.c \
	stencils/adi/adi.c \
	stencils/fdtd-2d/fdtd-2d.c \
	stencils/heat-3d/heat-3d.c \
	stencils/jacobi-1d/jacobi-1d.c \
	stencils/jacobi-2d/jacobi-2d.c \
	stencils/seidel-2d/seidel-2d.c

COMPILATION_TARGETS = \
	clang \
	gcc \
	jlc

COMP1 ?= jlc
COMP2 ?= clang
TARGET ?= $(COMP1)

# polybench-compare is based on compiling and running each benchmark
# with two different compilers and comparing the results

$(POLYBENCH_BUILD)/%: $(POLYBENCH_BUILD)/%.$(COMP1) $(POLYBENCH_BUILD)/%.$(COMP2)
	@$@.$(COMP1) 2> $@-$(COMP1).log
	@$@.$(COMP2) 2> $@-$(COMP2).log
	@echo "$@" ; \
	$(POLYBENCH_ROOT)/utilities/md5-diff.sh $@-$(COMP1).log $@-$(COMP2).log

.PHONY: polybench-compare
polybench-compare: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
	-DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_USE_C99_PROTO
polybench-compare: polybench-clean #polybench-$(COMP1) polybench-$(COMP2)
polybench-compare: $(patsubst %.c, $(POLYBENCH_BUILD)/%, $(POLYBENCH_SRC))

# polybench-check is based on a precomputed md5 checksum of the result,
# which the output of each benchmark is compared against

$(POLYBENCH_BUILD)/%.md5: $(POLYBENCH_BUILD)/%.$(COMP1)
	@$^ 2> $@.log
	@md5sum $@.log | cut -d" " -f1 > $@
	@echo "$@" ; \
	$(POLYBENCH_ROOT)/utilities/md5-diff.sh $@ $@-golden

.PHONY: polybench-check
polybench-check: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
	-DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_USE_C99_PROTO
polybench-check: polybench-clean polybench-$(COMP1)
polybench-check: $(patsubst %.c, $(POLYBENCH_BUILD)/%.md5, $(POLYBENCH_SRC))


#
# TODO: convert these other targets to the new structure based on source files
#       instead of benchmark paths and individual makefiles for each benchmark
#

# .PHONY: polybench-time
# polybench-time: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
# 	-DPOLYBENCH_USE_C99_PROTO -DPOLYBENCH_TIME
# polybench-time: polybench-clean-target $(POLYBENCH_RESULTS) polybench-$(TARGET)
# 	@$(foreach BENCHMARK, $(POLY_BENCHMARKS), \
# 		$(eval RESULTFILE = $(POLYBENCH_RESULTS)/$(notdir $(BENCHMARK))-$(TARGET)-time.txt) \
# 		\
# 		echo "$(BENCHMARK)/$(TARGET) > $(RESULTFILE)" ; \
# 		$(POLYBENCH_BUILD)/$(BENCHMARK)/$(TARGET).bin > $(RESULTFILE) ; \
# 	)

# .PHONY: polybench-size
# polybench-size: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
# 	-DPOLYBENCH_DUMP_ARRAYS -DPOLYBENCH_USE_C99_PROTO
# polybench-size: polybench-clean-target $(POLYBENCH_RESULTS) polybench-$(TARGET)
# 	@$(foreach BENCHMARK, $(POLY_BENCHMARKS), \
# 		$(eval RESULTFILE = $(POLYBENCH_RESULTS)/$(notdir $(BENCHMARK))-$(TARGET)-size.txt) \
# 		\
# 		size $(POLYBENCH_BUILD)/$(BENCHMARK)/$(TARGET).bin | tail -1 | cut -f1 | xargs > $(RESULTFILE) ; \
# 	)

# .PHONY: polybench-jlmstats
# polybench-jlmstats: LLCOPT = LLCO0
# polybench-jlmstats: PIPELINE = jlm-LLC
# polybench-jlmstats: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities --print-cfr-time
# polybench-jlmstats: polybench-clean $(POLYBENCH_RESULTS) jlm-LLCO0
# 	@rm -f $(POLYBENCH_JLMSTATS)
# 	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
# 		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
# 		\
# 		sed -e 's/$$/ $(BENCHMARK)/' -i $(BENCHMARK_ROOT)/jlmstats.log ; \
# 		cat $(BENCHMARK_ROOT)/jlmstats.log >> $(POLYBENCH_JLMSTATS) ; \
# 	)

# .PHONY: polybench-timetable
# polybench-timetable: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
# 	-DPOLYBENCH_USE_C99_PROTO -DPOLYBENCH_TIME
# polybench-timetable: polybench-clean polybench
# 	@echo -n "# benchmark"
# 	@$(foreach TARGET, $(COMPILATION_TARGETS), \
# 		echo -n " $(TARGET)" ; \
# 	)
# 	@echo ""
# 	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
# 		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
# 		\
# 		echo -n "$(BENCHMARK)" ; \
# 		$(foreach TARGET, $(COMPILATION_TARGETS), \
# 			TIME=`$(POLYBENCH_BUILD)/$(BENCHMARK_ROOT)/$(TARGET).bin` ; \
# 			echo -n " $${TIME}" ; \
# 		) \
# 		echo "" ; \
# 	)

# .PHONY: polybench-sizetable
# polybench-sizetable: CPPFLAGS += -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities \
# 	-DPOLYBENCH_USE_C99_PROTO
# polybench-sizetable: polybench-clean polybench
# 	@echo -n "# benchmark "
# 	@$(foreach TARGET, $(COMPILATION_TARGETS), \
# 		echo -n " $(TARGET)" ; \
# 	)
# 	@echo ""
# 	@$(foreach BENCHMARK_ROOT, $(POLY_BENCHMARKS), \
# 		$(eval BENCHMARK = $(notdir $(BENCHMARK_ROOT))) \
# 		\
# 		echo -n "$(BENCHMARK)" ; \
# 		$(foreach TARGET, $(COMPILATION_TARGETS), \
# 			SIZE=`size $(POLYBENCH_BUILD)/$(BENCHMARK_ROOT)/$(TARGET).bin | tail -1 | cut -f1 | xargs`; \
# 			echo -n " $${SIZE}" ; \
# 		) \
# 		echo "" ; \
# 	)

# $(POLYBENCH_RESULTS):
# 	mkdir -p $(POLYBENCH_RESULTS)

### CLEAN

.PHONY: polybench-clean
polybench-clean:
	@rm -rf $(POLYBENCH_BUILD)
	@rm -rf $(POLYBENCH_ROOT)/*/*/*.o
	@rm -rf $(POLYBENCH_ROOT)/*/*/*/*.o

.PHONY: polybench-clean-target
polybench-clean-target:
	rm -f $(POLYBENCH_BUILD)/*/*.$(TARGET)
	rm -f $(POLYBENCH_BUILD)/*/*/*.$(TARGET)

.PHONY: polybench-purge
polybench-purge: polybench-clean
	@rm -rf $(POLYBENCH_RESULTS)

### HELP

define HELP_TEXT_POLYBENCH_TARGETS
echo ""
echo "COMP1, COMP2, and TARGET can be set to one of the following options"
echo "--------------------------------------------------------------------------------"
echo "clang"
echo "gcc"
echo "jlc"
endef

############################################################################
# TARGETS FOR COMPILING ALL BENCHMARKS WITH DIFFERENT OPTIMIZATION OPTIONS #
############################################################################

EXTRA_FLAGS=-lm

.PHONY: polybench
polybench: polybench-clang polybench-gcc polybench-jlc

# Copy the precomputed md5 checksum to the build directory
# This checksum is later used by polybench-check to verify
# the result of benchmark runs
$(POLYBENCH_BUILD)/%.md5-golden: $(POLYBENCH_ROOT)/%-output.md5
	@cp $^ $@

#
# clang
#

# Compile individual C files into clang specific object files
$(POLYBENCH_BUILD)/%-clang.o: $(POLYBENCH_ROOT)/%.c
	@mkdir -p $(dir $@)
	@$(VERBOSE) $(CLANG) $(CPPFLAGS) -c $^ -o $@

# Once both the polybench and benchmark specific file has been compiled
# it can be linked to a clang specific executable
$(POLYBENCH_BUILD)/%.clang: $(POLYBENCH_BUILD)/%-clang.o $(POLYBENCH_BUILD)/utilities/polybench-clang.o
	@$(VERBOSE) $(CLANG) $(CPPFLAGS) $^ -o $@ $(EXTRA_FLAGS)

.PHONY: polybench-clang
polybench-clang: CPPFLAGS += -O3 -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities -DPOLYBENCH_USE_C99_PROTO
polybench-clang: $(POLYBENCH_BUILD)/utilities/polybench-clang.o
polybench-clang: $(patsubst %.c, $(POLYBENCH_BUILD)/%.clang, $(POLYBENCH_SRC))

#
# gcc
#

# Compile individual C files into gcc specific object files
$(POLYBENCH_BUILD)/%-gcc.o: $(POLYBENCH_ROOT)/%.c
	@mkdir -p $(dir $@)
	@$(VERBOSE) gcc $(CPPFLAGS) -c $^ -o $@ $(EXTRA_FLAGS)

# Once both the polybench and benchmark specific file has been compiled
# it can be linked to a gcc specific executable
$(POLYBENCH_BUILD)/%.gcc: $(POLYBENCH_BUILD)/%-gcc.o $(POLYBENCH_BUILD)/utilities/polybench-gcc.o
	@$(VERBOSE) gcc $(CPPFLAGS) $^ -o $@ $(EXTRA_FLAGS)

.PHONY: polybench-gcc
polybench-gcc: CPPFLAGS += -O3 -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities -DPOLYBENCH_USE_C99_PROTO
polybench-gcc: $(POLYBENCH_BUILD)/utilities/polybench-gcc.o
polybench-gcc: $(patsubst %.c, $(POLYBENCH_BUILD)/%.gcc, $(POLYBENCH_SRC))

#
# jlc
#

# Compile individual C files into jlc specific object files
$(POLYBENCH_BUILD)/%-jlc.o: $(POLYBENCH_ROOT)/%.c
	@mkdir -p $(dir $@)
	@$(VERBOSE) $(JLC) $(CPPFLAGS) -c $^ -o $@ $(EXTRA_FLAGS)

# Once both the polybench and benchmark specific file has been compiled
# it can be linked to a jlc specific executable
$(POLYBENCH_BUILD)/%.jlc: $(POLYBENCH_BUILD)/%-jlc.o $(POLYBENCH_BUILD)/utilities/polybench-jlc.o
	@$(VERBOSE) $(JLC) $(CPPFLAGS) $^ -o $@ $(EXTRA_FLAGS)

.PHONY: polybench-jlc
polybench-jlc: CPPFLAGS += -O3 -I$(POLYBENCH_ROOT) -I$(POLYBENCH_ROOT)/utilities -DPOLYBENCH_USE_C99_PROTO
polybench-jlc: $(POLYBENCH_BUILD)/utilities/polybench-jlc.o
polybench-jlc: $(patsubst %.c, $(POLYBENCH_BUILD)/%.jlc, $(POLYBENCH_SRC))
polybench-jlc: $(patsubst %.c, $(POLYBENCH_BUILD)/%.md5-golden, $(POLYBENCH_SRC))
